version: "3.9"

services:
  db:
    image: postgres:16.4-alpine
    environment:
      - POSTGRES_DB=shop_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5434:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  postgresql:
    image: postgres:16.4-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    command: >
      bash -c "
      docker-entrypoint.sh postgres &
      sleep 5 &&
      psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'backend'\" | grep -q 1 || psql -U postgres -c 'CREATE DATABASE backend;' &&
      psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'bank_card'\" | grep -q 1 || psql -U postgres -c 'CREATE DATABASE bank_card;' &&
      wait
      "

  web:
    build:
      context: .
      dockerfile: site_prototype.Dockerfile
    command: >
      bash -c "
      if poetry run python manage.py migrate; then 
        echo 'Migrations applied successfully'; 
      else 
        echo 'Migration failed (already exists or failed)'; 
      fi && 
      if poetry run python manage.py shell -c 'from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username=\"admin\").exists() or User.objects.create_superuser(\"admin\", \"admin@example.com\", \"admin\")'; then 
        echo 'Superuser created or already exists'; 
      else 
        echo 'Superuser creation failed (already exists or failed)'; 
      fi && 
      if poetry run python manage.py populate_db; then 
        echo 'Database populated successfully'; 
      else 
        echo 'Database population failed or command not found'; 
      fi && 
      if poetry run python manage.py runserver 0.0.0.0:8000; then 
        echo 'Server started on port 8000'; 
      else 
        echo 'Server failed to start'; 
      fi
      "
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./site_prototype:/app
    ports:
      - "8000:8000"
    depends_on:
      - db

  backend-app:
    build:
      context: .
      dockerfile: backend.Dockerfile
    depends_on:
      - postgresql
    ports:
      - "8080:8080"
    volumes:
      - maven_cache:/root/.m2
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/actuator/prometheus"

  bank-card-app:
    build:
      context: .
      dockerfile: bankcard.Dockerfile
    depends_on:
      - postgresql
    ports:
      - "8081:8081"
    volumes:
      - maven_cache:/root/.m2

  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    container_name: react-ui
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true

  prometheus:
    image: prom/prometheus:v2.30.3
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    depends_on:
      - backend-app

  grafana:
    image: grafana/grafana:8.2.2
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  db_data: {}
  postgresql_data: {}
  maven_cache: {}
  prometheus_data: {}
  grafana_data: {}
