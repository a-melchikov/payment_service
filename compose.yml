services:
  db:
    image: postgres:16.4-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "${DOCKER_DB_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  postgresql:
    image: postgres:16.4-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./scripts:/scripts
    command: >
      bash -c "
      docker-entrypoint.sh postgres &
      sleep 5 &&
      psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = '${POSTGRES_DB_BACKEND}'\" | grep -q 1 || psql -U postgres -c 'CREATE DATABASE ${POSTGRES_DB_BACKEND};' &&
      psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = '${POSTGRES_DB_BANK_CARD}'\" | grep -q 1 || psql -U postgres -c 'CREATE DATABASE ${POSTGRES_DB_BANK_CARD};' &&
      sleep 2 &&
      psql -U postgres -d ${POSTGRES_DB_BACKEND} -f /scripts/init_trigger.sql &&
      wait
      "

  web:
    build:
      context: .
      dockerfile: site_prototype.Dockerfile
    command: >
      bash -c "
      if poetry run python manage.py migrate; then 
        echo 'Migrations applied successfully'; 
      else 
        echo 'Migration failed (already exists or failed)'; 
      fi && 
      if poetry run python manage.py shell -c 'from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username=\"admin\").exists() or User.objects.create_superuser(\"admin\", \"admin@example.com\", \"admin\")'; then 
        echo 'Superuser created or already exists'; 
      else 
        echo 'Superuser creation failed (already exists or failed)'; 
      fi && 
      if poetry run python manage.py populate_db; then 
        echo 'Database populated successfully'; 
      else 
        echo 'Database population failed or command not found'; 
      fi && 
      (poetry run python manage.py listen_to_transactions &) && 
      poetry run python manage.py runserver 0.0.0.0:8000
      "
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./site_prototype:/app
    ports:
      - "${WEB_PORT}:8000"
    depends_on:
      - db
    env_file:
      - .env

  backend-app:
    build:
      context: .
      dockerfile: backend.Dockerfile
    depends_on:
      - postgresql
    ports:
      - "${BACKEND_PORT}:8080"
    volumes:
      - maven_cache:/root/.m2
      - ./backend/logs:/usr/share/logs
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/actuator/prometheus"
    env_file:
      - .env

  bank-card-app:
    build:
      context: .
      dockerfile: bankcard.Dockerfile
    depends_on:
      - postgresql
    ports:
      - "${BANK_CARD_PORT}:8081"
    volumes:
      - maven_cache:/root/.m2

  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    container_name: react-ui
    ports:
      - "${FRONTEND_PORT}:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true

  prometheus:
    image: prom/prometheus:v2.30.3
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "${PROMETHEUS_PORT}:9090"
    depends_on:
      - backend-app

  grafana:
    image: grafana/grafana:8.2.2
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - prometheus

  elasticsearch:
    image: elasticsearch:8.14.3
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.14.3
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200

  filebeat:
    image: elastic/filebeat:8.14.3
    container_name: filebeat
    command: filebeat -e -strict.perms=false
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./backend/logs:/usr/share/logs
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

volumes:
  db_data: {}
  postgresql_data: {}
  maven_cache: {}
  prometheus_data: {}
  grafana_data: {}
  es_data: {}
